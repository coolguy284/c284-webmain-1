general: update packages (on old servers also), user acc system

re add windows index.ps1 and docker scripts

rename /data/UnicodeData.txt to /misc/unicode/data/UnicodeData.txt
add validator for canonical urls and meta urls, printing if they exist but do not match real url or if they are not equal
  validation for meta description tags, to supplement validation for canonical urls
  can implement in helpers/main.js, either print as a warning (probably) or an error (maybe)
  also validator to make sure "to" urls in redirects.txt are the final form of the url for the most part
use map and promise all for git log and others or for none of them
process all file redirects (and maybe all file and folder redirects) so that one redirect's to can be another's from but they both redirect to the another's to (redirect chaining), then convert current redirects to chain instead of all pointing to the correct destination
store node-server and other repositories directly in the code, docker build scripts auto clone or update them
api endpoint that sends a 204 and a non standard date header with extra precision

enigma machine and other sites in tools and other from the old site
don't use recursion for recursive readdir or sitemap get (fix both on both wm1 and zextra)
copied over bson and other libs/extern should have version in title so webpages are guaranteed to request latest version instead of caching
mongodb figure out why replica set necessary and fix
replace string startswith checks followed by string slicing with regex matching (ex. srv_web_main/helpers/main.js lines 69-70)
proper websocket closure with server closure, echo and status ws should just close all connections immediately, chat ws should send chat exit packet (maybe statusws can do the same)
http.coolguy284.com or insecure.coolguy284.com
  implement by adding a works with http flag that must be turned on for each page that works with http, otherwise a 404 is sent
  api endpoints also should be marked as working on insecure or not
  also add unencrypted and encrypted http2 upgrade
fix all docker containers getting a sigint simultaneously when proc_main one does
make more lib/extern copied from node_modules in dockerfile
old sites
  dompurify to old node chat
  bring back important
  make wm1, ns, nsn work as subfolder on website, meaning change html and js files to not use absolute paths
  update github repos description urls once hosted
  check whether oldg really needs external links warning
potential put srv_web_main through readline stream and add on timestamp and "[main]" if message has no identifiers otherwise
http2 websocket 404 strange behavior
add sitemap.xml, robots.txt, and others to debug pages, basically all currently unlinked pages
  do the same in node srv, node srv new, c284 git io
make proxies disconnect other end if one end closes, forward errors as well
  make socketLink function in common that does all this to prevent code duplication
  if http proxy res function is given already complete res it will hang and not close socket and browser will load indefinitely as well
  add support for https proxying with ignoretlserrors
create_sitemap return lastmod and other properties, also return array of objects instead of map
nosniff and other headers of the same nature should appear everywhere
allow main code folder and main data secrets folder to be anywhere and make scripts use a relative path to reference them

add nested layers of indexes for unicode
add privacy policy
  if cannot do legally rigorous privacy policy yet cause of lack of knowledge, then do simple hard fact data description privacy policy until then
fancier latency test and time syncer, less NaN
add no javascript banner to all pages that use javascript in the slightest
add warnings to encrypting, decrypting, hashing, etc. to not use for security purposes
improve localstorage editor cookies handling
add description to more misc pages
sitemap gen proper html parser and proper parsing of urls
sitemap changefreq based on lastmod (maybe)
add adblock detector site (for fun)
chat empty string should show up as anonymous
chat, echo, status websockets should have proper server close exit code and server close procedure where client closes, instead of force close
add alternate webpage access url /api/page?page=<url> or /api/page?page_b64=<b64_url> endpoint with optional &replace_internal_urls=true
  forward headers and call request func with headers, except maybe not forward last modified
  possible future support for full urls for proxy like instead of just server urls
  possible tie in to virtual browser
  maybe a public or api keyed js api to make any http query
add comments to wm1 code
rework docs on wm1, make docs accessible as wm1 subpage, link to all docs from main doc or subdocs
make sure each page in docs is fully up to date and add more pages as necessary
auto sitemap generator (limit 1 query per website per ip every hour, and limit 20 queries per website per hour)
add strange files page, with weird zips and wims and stuff
status garden with api endpoints or regular endpoints for every http status code
potentially put old sites in archive tab which links to a page with detailed explanations of all of them
use fs.promises and async for everything possible
potentially add more multi page auto generated pages like unicode
make misc index proper
  add tweaks made to regular index to it as well like fix version footer rendering issue and update stylesheet and inline style to match index
add top navbar to base64 site and other tools sites and other parts of website in general
  should be in format of coolguy284.com (right arrow) tools (right arrow) base64 encoder; all 3 parts are links
  should have same background color as index page navbar
add waveform gen and other repl sites to website
possibly live website_data.txt evaluating because of unicode characters pages, should be marked no crawl at first but will need to send that header
experiment with wiki stuff
add /misc/trail which is a page with status code 451, links to other stuff if bypassed (by setting ?location=space&admin=true), 1 layer deep it will say trail ends here for now until extended
  when location is set the page says location "location" is not valid, when not set it defaults to something
implement altsvc and http3 support
when chrome supports level 4 media queries remove comment in encode_decode.html
way to live update server code during development without need for docker rebuild, either update and rerun inside docker or live patch while running, which would require everything to be made very modular
/api/echo/headers subfolder support
api ipv6 error if ipv4, unless parameter usemapped is set to true
add env vars for http, https, http2 enabled
word search solver use camera and english dictionary, support for spaces in middle of word
click speed and press speed more obvious names, enable clicks or presses anywhere on page, nicer ui
add base64_url to encode_decode page
add keywords to repo for pages on website
multiplayer snake game, circle game
add external link icon for external link
make pages for more of subtlecrypto api, like pbkdf, dh, ecdh, and future post quantum algs
atmospheric pressure converter
env var for strict transport security
support protocol relative paths in redirects file
add content security policy header to site
proper todo list html page
  eventually add suggestions page and suggestions db maybe email notif or some other form of notif
  maybe suggestions page linked from todo or just part of todo or maybe just by itself
  add wm pages for all current github redirects in redirects.txt
mongodb reverse proxy upgrades
  take in nodejs ipc comm instead and calls mongo client funcs to abstract away perms, but still add users and perms to mongodb anyway and use them
  maybe seperate proc_mongodbpass w. reverse proxy for password db
  forward stdin query commands to mongodb
proc main use docker daemon to get cpu, mem, net, disk io (maybe) of all wm1 processes and sends it to main server proc and is shown on status page
  stats recorded every minute
add brotli to oldg and future nginx servers
maybe update oldg to look better on mobile (also misc/rectangles)
/misc/old temp pages need to be updated and then removed from the temp pages
add option in time syncer to use date header instead
add webpage with textbox where it just tells you length of content in textbox, maybe other stuff like number of unique chars, number of words, number of unique words, letter distribution chart, etc.
add converters for base85 (ascii85), base58, base36, base32, base62, punycode
add converters for utf8 to utf16 or utf32; and also for lf to crlf or cr
advanced color picker with RGB / RYB / CMY modes, ability to pick harmonies like complimentary, analagous, triad, split complimentary, tetradic, square, have multiple harmonies on the wheel at once
make sure all async subfunctions / function calls in every async function are awaited, also ensure this for node-server, -new, and other repos
decide whether meta tag keywords should be always lowercase or not
decide whether to move inline script in index to immediately after navbar

hex editor
english words searcher
add pseudo live birth and death tracker that is not linear but instead has realistic randomness in the timing, also maybe other events, also random names
convert server to restful api
add /api/help endpoint that explains api endpoints
  explains /chat/ws and future chat endpoints as well, or points to a /chat/docs endpoint that explains the same
logs reform, make all logged requests debug and turn off debug, put basic info (ip and url) into seperate file for processing and conversion to aggregate format
  beginner log reform is hide ip and maybe url or more from main log, make addl log that doesnt have terminal formatting characters that does have the info, then think of how to collate into url accessed in country and per operating system thing like old server viewshist
  defer log debug tcp and tls until request sent unless debug_log_req_always on
    if no request sent assume priv mode unless debug_log_req_always (although check shouldnt be necessary)
  handle logs though proc main, proc main sends them to proc mongodb for storing, and mongodb handles deletion and aggregation every 24*30*60 minutes or every server tick
  delete logs after 30 days, only aggregate after then, no exceptions, including all legacy data
add website version to status, maybe also add more things
  add cpu and mem and bunch of other things
  maybe vps name and info
  maybe vps cost and domain name cost
  avg requests per second
  limited request info like approx number of times url accessed
  total page visits today and total all time; also total unique visitors today and all time
  all things in status page should have complete historical data available if it makes sense to do so, compressed with xz
rename qr code to qr code generator and make qr code reader
converter or smth w. encodings, textboxes, n other stuff and contenteditable div, more general version of base64/url/uricomp etc, but also horizontal instead of vertical
random number gens and testing suites
optional service worker for caching and testing
finish unicode viewer and link it
  putting single char in shows that char as unicode entry first thing, insta search all substring, entry as tall as form box for room for enlarged unicode char, alternative view where each one is a cell
opencloudhash and cloudhash (csprng based fake hash using database, with api for access), opencloudhash has hash entries visible, cloudhash does not
xampp subfolder /x, wordpress subfolder /x/w
user account system
  user flags int, first bit is admin flag
  maybe gives access to precise viewshist
  also standard admin console as well
add open declaration of password security and data handling (when its time)
chat upgrades
  option to send as markdown, bbcode, or html
  voice upgrades
    colored server mutes
    text, voice, raw data thru voice (or maybe data channels), inputs keyboard mouse controller etc sent to bot and output stream from bot (thru voice channel)
    ability to see whether people can see livestream and what their latency to it is
    ability to mute or cutoff video on livestream, same for audio
      mute just hides but cutoff stops receiving traffic
      but for convenience mute can do that too unless disabled in client setting
    ability for a bot to join auto client muted by everyone (although a seperate client mute than the normal one, like client suppress)
    total list of mutes/deafens on other people:
      side: client or server side
      type: mute or deafen
      category: audio, video, stream, data (can merge categories client side or server side)
      value: perm off, temp off, inherit, temp on, perm on (inherit copies value from channel permissions and is the default, temp off is how to for example let someone speak in a channel they normally cannot, temp values go away when user leaves voice (but can be set when user not in voice as a preemptive), perm values persist)
      value inherit can be changed in server settings to be split into two values, inherit (which will insta update when channel permissions update) and inherit once (which will be calculated on channel join and will not change), or to make the single option version of inherit behave like inherit once instead
      when adjusting voice permissions to prevent a user from doing something, a prompt will appear saying whether they want to set everyone in vc to temp off (only if server is set to not use inherit once for inherit behavior)
      mutes/deafens can be edited when user not in voice channel as well
      server setting for whether client deafens of a user that is not you will have effect (i.e. preventing them and only them from hearing your voice, camera, etc.)
    mutes/deafens on self:
      client mute: prevents transmitting audio out from self client side, normally linked to a visual client mute which shows others you are doing so but can be decoupled in client settings
      client deafen: prevents receiving audio from others client side, normally linked to a visual client mute which shows others you are doing so but can be decoupled in client settings
      pseudo server mute: prevents transmitting audio out from self server side, forces a visual client mute server side so others know you are guaranteed to be doing so and cannot secretly speak
      pseudo server deafen: prevents receiving audio from others self server side, forces a visual client mute server side so others know you are guaranteed to be doing so and cannot secretly hear
      client mute/deafen and pseudo server action of the same type are normally linked but can be decoupled client side (although that would appear suspicious)
      can turn off client mute if it is turned on even if server mute is turned on, there is no gui preventing such an action
    client actions:
      audio (default on), video (default off), stream (default off, can be on multiple times aka many different streams), raw data (default off)
      defaults can be changed in settings
      in settings deafen can be configured to auto mute as well
    client side servers that can pull channels from other servers
    ability to client side reorder channels in servers
    zoom in on stream or facecam on mobile or pc
    stream pop out windows can be set to a particular stream, main window can be split into regions with seperate views and so can pop out
  embed ideas
    ability to add datetimes to middle of chat message and have them render in user's timezone
    other such processed elements like that or even active elements
    date could also appear in calendar form or countdown form as an embed
    maybe not called an embed but instead a more loose term, or instead embeds could have many types, such as title and desc, calendar, stopwatch, iframe, etc
    website embeds show website small with button to make large and another button to open in new tab (or open in browser in general if c++ client used) which also appears in large view
    embeds can appear at bottom of message or inside middle of message
  arbitrary kv pairs on msgs, user, channel, member, server, etc
  instant caching of image links and website iframe embed creating links sent, and showing the cached version, to protect end user ip
  c++ client for chat and for rest of website in a general sense
  make a visual stream of text messages with occasional embeds visually appealing
  option to put certain channels into a check later folder to save their messages for later, then can check the current msgs in the channel the normal way and the earlier ones can be checked later on by checking the check later folder
  client or server side regex replacement of messages (server side in server specific settings)
  server side fake permissions drop, better than client side roles removed, but also configurable extra permissions drop not related to roles
  option to replace numbers with word versions, 4 with four
  option to configure representation of dates and times, but maybe more than one configuration cause dates can be on message, in audit log, etc
  add ability to client side set user's pfp to previous one or another one entirely or just a nothing, same for usernames
  servers and channels can have pfps
  servers and channels on the left panels have pfp on left and name on right in their div, server pick panel is on left, channel pick is on left but is right of server pick
social media
  by default nothing is used for any analytics
  if there are analytic requests (for someone's likeness or something) for some reason, they are asked thru notifs (auto denied after a while)
    requests for accepting tagging you in an image (possibly created by someone else), and other ai reasons or other reasons, and a different prompt for each reason, all opt in by default
    on the prompt, there is accept or deny of course, but also checkbox for remember this decision, which has a select below it that says "for this content creator", "for all posts" (can also say for whatever other message types there are), and "for everything"
  images posted by someone that have someone else in them can be removed by the someone else if they don't consent
spaces
  universes, zones, simple objects and physical simulation regions
production ready xampp site, self hosted github equiv, all of which are accessible as subfolders on main or their own seperate domain, in future self hosted git might be main git that i use and thus wont be proxied through srv web main but hosted seperately, but only that hosted seperately
request explorer site where you can create arbitrary http requests to urls on the server, make and close http1.1 and http2 connections, http/https, and even send data through websocket connections
multipart range header support and support for reading and responding with multiparts in other circumstances as well
commenter website where you can comment on a site if the site has no comment functionality by default
  but maybe not if the site owner has an explicit reason not to
  site owner can later add it as an iframe if they want

extra:
experiment with unsorted readdirs using fuse, if works potential necessity to sort c284-webmain-1 modtimes.json or maybe just sort it anyway

problems:
proc_main index.js seems to stay running if one of sibling docker containers started by it is still running

notes:
srv_web_main/common/url_valid_check.js has hardcoded 2 functions and 1 set from common (since it must be able to run independently)
srv_web_main/log_utils.js has hardcoded 1 function from common (since it runs first)
